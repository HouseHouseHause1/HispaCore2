package com.qbasty.hispcore2;

import org.bukkit.*;
import org.bukkit.block.BlockFace;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.entity.EntityTeleportEvent;
import org.bukkit.event.entity.ProjectileLaunchEvent;
import org.bukkit.event.player.PlayerBucketEmptyEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.event.world.ChunkLoadEvent;

import java.awt.*;
import java.util.HashSet;
import java.util.Set;

public class Exploits implements Listener {

    private final Main plugin;
    private final Set<String> throwCoolDown = new HashSet<>();
    private final Set<Location> throwCoolDownLocations = new HashSet<>();

    public Exploits(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onPlayerBucketEvent(PlayerBucketEmptyEvent evt) {
        String playerName = evt.getPlayer().getName();
        Material type = evt.getBlockClicked().getType();
        BlockFace face = evt.getBlockFace();
        World world = evt.getBlockClicked().getWorld();

        final boolean isAround = face == BlockFace.NORTH || face == BlockFace.EAST || face == BlockFace.SOUTH || face == BlockFace.WEST;

        if (type == Material.BEDROCK && world.getEnvironment().equals(World.Environment.THE_END)) {
            if (isAround) {
                evt.setCancelled(true);
                plugin.getLogger().info("Prevented " + playerName + " from destroying a portal!");
            }
        }

        if (type == Material.ENDER_PORTAL_FRAME) {
            if (isAround) {
                evt.setCancelled(true);
                plugin.getLogger().info("Prevented " + playerName + " from destroying a portal!");
            }
        }

        if (face == BlockFace.UP || face == BlockFace.DOWN) {
            if (evt.getPlayer().getWorld().getBlockAt(evt.getBlockClicked().getX(), evt.getBlockClicked().getY() - 1, evt.getBlockClicked().getZ()).getType() == Material.ENDER_PORTAL || evt.getPlayer().getWorld().getBlockAt(evt.getBlockClicked().getX(), evt.getBlockClicked().getY() + 1, evt.getBlockClicked().getZ()).getType() == Material.ENDER_PORTAL) {
                evt.setCancelled(true);
                plugin.getLogger().info("Prevented " + playerName + " from destroying a portal!");
            }
        }
    }

    @EventHandler
    private void onInteract(PlayerInteractEvent evt) {
        if (evt.getAction() == Action.RIGHT_CLICK_BLOCK) {
            if (evt.getClickedBlock().getType() == Material.SIGN || evt.getClickedBlock().getType() == Material.SIGN_POST || evt.getClickedBlock().getType() == Material.WALL_SIGN) {
                evt.setCancelled(true);
            }


        }
    }

    @EventHandler
    private void onPortal(EntityPortalEvent event) {
        if (!event.getEntity().getType().isAlive()) {
            event.setCancelled(true);
        } else if (event.getEntity() instanceof org.bukkit.entity.Vehicle) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onGateWay(EntityPortalEvent event) {
        if (event.getEntity() instanceof org.bukkit.entity.Vehicle) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onGateWay2(EntityTeleportEvent event) {
        if (event.getEntity() instanceof org.bukkit.entity.Vehicle) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onDispense(BlockDispenseEvent event) {
        if (event.getItem().getType().name().contains("SPAWN_EGG"))
            event.setCancelled(true);
    }

    @EventHandler
    private void onDispense2(BlockDispenseEvent evt) {
        if (plugin.getConfig().getBoolean("PreventDispenserCrashExploit") && (evt.getBlock().getLocation().getY() >= evt.getBlock().getWorld().getMaxHeight() - 1 || evt.getBlock().getLocation().getY() <= 0)) {
            evt.setCancelled(true);
            plugin.getLogger().warning("Prevented a dispenser from crashing the server at " + evt.getBlock().getLocation());
        }
    }

    @EventHandler
    private void onEntityTeleportEvent(EntityTeleportEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventEndGatewayCrashExploit")) {
            if (evt.getEntity().getWorld().getEnvironment().equals(World.Environment.THE_END) && !evt.getEntity().isEmpty()) {
                evt.setCancelled(true);
            }
        }
    }

    @EventHandler
    public void onMove(PlayerMoveEvent evt) {
        if (plugin.getConfig().getBoolean("ExperimentalGodModePatch")) {
            if (evt.getPlayer().isInsideVehicle()) {
                if (!evt.getPlayer().getVehicle().isValid()) {
                    evt.getPlayer().getVehicle().eject();
                    plugin.getLogger().warning("Attempted to prevent godmode from " + evt.getPlayer().getName() + ": dismounted from entity.");
                }
            }
            if (!evt.getPlayer().isValid() && !evt.getPlayer().isDead()) {
                evt.getPlayer().kickPlayer(ChatColor.GOLD + "You have lost connection to the server");
                plugin.getLogger().warning("Attempted to prevent godmode from " + evt.getPlayer().getName() + ": kicked player");
            }
        }
    }

    @EventHandler
    private void onChunkLoadEvent(ChunkLoadEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("FillInBedrockFloor")) {
            Chunk c = evt.getChunk();
            if (!evt.isNewChunk()) {
                if (!c.getWorld().getEnvironment().equals(World.Environment.THE_END)) {
                    int cx = c.getX() << 4;
                    int cz = c.getZ() << 4;
                    for (int x = cx; x < cx + 16; x++) {
                        for (int z = cz; z < cz + 16; z++) {
                            for (int y = 0; y < 1; y++) {
                                if (c.getBlock(x, y, z).getType() != Material.BEDROCK) {
                                    c.getBlock(x, y, z).setType(Material.BEDROCK);
                                }
                            }
                        }
                    }
                }
            }
        }

        if (config.getBoolean("FillInBedrockRoof")) {
            Chunk c = evt.getChunk();
            if (!evt.isNewChunk()) {
                if (c.getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                    int cx = c.getX() << 4;
                    int cz = c.getZ() << 4;
                    for (int x = cx; x < cx + 16; x++) {
                        for (int z = cz; z < cz + 16; z++) {
                            for (int y = 0; y < 128; y++) {
                                if (y == 127) {
                                    if (c.getBlock(x, y, z).getType() != Material.BEDROCK) {
                                        c.getBlock(x, y, z).setType(Material.BEDROCK);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    @EventHandler
    private void onThrow(ProjectileLaunchEvent evt) {
        if (plugin.getConfig().getBoolean("PreventSnowBallExploit")) {
            boolean found = false;
            for (Player p : Bukkit.getOnlinePlayers()) {
                Point p1 = new Point(evt.getEntity().getLocation().getBlockX(), evt.getEntity().getLocation().getBlockZ());
                Point p2 = new Point(p.getLocation().getBlockX(), p.getLocation().getBlockZ());
                if (p1.distance(p2) <= 1) {
                    found = true;
                    if (throwCoolDown.contains(p.getName())) {
                        if (evt.getEntity().getType() != EntityType.THROWN_EXP_BOTTLE) {
                            evt.setCancelled(true);
                        }
                    } else {
                        throwCoolDown.add(p.getName());
                        Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> throwCoolDown.remove(p.getName()), 6L);
                    }
                }
            }
            if (!found) {
                boolean done = false;
                for (Location l : throwCoolDownLocations) {
                    Point p1 = new Point(evt.getEntity().getLocation().getBlockX(), evt.getEntity().getLocation().getBlockZ());
                    Point p2 = new Point(l.getBlockX(), l.getBlockZ());
                    // We check if the entity is anywhere near our last
                    if (p1.distance(p2) <= 100) {
                        done = true;
                        evt.setCancelled(true);
                    }
                }
                if (!done) {
                    Location location = evt.getEntity().getLocation();
                    throwCoolDownLocations.add(location);
                    Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> throwCoolDownLocations.remove(location), 20L);
                }
            }
        }
    }

    @EventHandler
    private void onMove2(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("PreventBedrockFloor")) {
            if (evt.getPlayer().getLocation().getY() < 0) {
                if (!evt.getPlayer().getWorld().getEnvironment().equals(World.Environment.THE_END)) {
                    evt.getPlayer().getWorld().getBlockAt(evt.getPlayer().getLocation().getBlockX(), 0, evt.getPlayer().getLocation().getBlockZ()).setType(Material.BEDROCK);
                    evt.setTo(evt.getFrom().add(0, 5, 0));
                }
            }
        }
    }

    @EventHandler
    public void onTeleport(PlayerTeleportEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventNetherRoof")) {
            if (evt.getPlayer().getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                if (!evt.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) {
                    if (evt.getFrom().getY() < 128 && evt.getTo().getY() >= 128) {
                        evt.getPlayer().teleport(evt.getFrom());
                    }
                }
            }
        }
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventNetherRoof")) {
            if (evt.getPlayer().getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                if (!evt.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) {
                    if (evt.getTo().getY() >= 128) {
                        evt.getPlayer().teleport(new Location(evt.getPlayer().getWorld(), evt.getPlayer().getLocation().getX(), 120, evt.getPlayer().getLocation().getZ()));
                    }
                }
            }
            if (evt.getPlayer().isInsideVehicle()) {
                if (evt.getPlayer().getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                    if (!evt.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) {
                        if (evt.getPlayer().getLocation().getY() > 127) {
                            evt.getPlayer().leaveVehicle();
                        }
                    }
                }
            }
            if (evt.getPlayer().isGliding()) {
                if (evt.getPlayer().getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                    if (!evt.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) {
                        if (evt.getPlayer().getLocation().getY() > 127) {
                            evt.getPlayer().setGliding(false);
                        }
                    }
                }
            }
        }
    }
}